#ifndef _H_SST_SNN_PE_SUBCOMPONENT
#define _H_SST_SNN_PE_SUBCOMPONENT

#include <sst/core/subcomponent.h>
#include <sst/core/interfaces/stdMem.h>
#include <sst/core/link.h>
#include <sst/core/output.h>
#include <queue>
#include <map>
#include <functional>
#include "SpikeEvent.h"
#include "SnnPEParentInterface.h"
#include "SnnCoreAPI.h"

namespace SST {
namespace SnnDL {

class SnnPESubComponent : public SnnCoreAPI {
public:
    SST_ELI_REGISTER_SUBCOMPONENT(
        SnnPESubComponent,
        "SnnDL",
        "SnnPESubComponent",
        SST_ELI_ELEMENT_VERSION(1, 0, 0),
        "SNN Processing Element SubComponent",
        SST::SnnDL::SnnPESubComponent
    )

    SST_ELI_DOCUMENT_PARAMS(
        {"core_id", "ID of the core", ""},
        {"total_cores", "Total number of cores in the PE", "8"},
        {"global_neuron_base", "Global base ID for neurons in this core", "0"},
        {"num_neurons", "Number of neurons in this core", "64"},
        {"v_thresh", "Neuron threshold voltage", "1.0"},
        {"v_reset", "Neuron reset voltage", "0.0"},
        {"v_rest", "Neuron resting voltage", "0.0"},
        {"tau_mem", "Membrane time constant", "20.0"},
        {"t_ref", "Refractory period in clock cycles", "2"},
        {"base_addr", "Base address for weight fetching", "0"},
        {"node_id", "Node ID of the parent PE", "0"},
        {"verbose", "Verbosity level", "0"},
        {"enable_weight_fetch", "Enable fetching weights from memory", "0"},
        {"write_weights_on_init", "Write default weights to memory on init", "1"},
        {"memory_warmup_cycles", "Cycles to wait before starting memory operations", "1000"},
        {"init_default_weight", "Default weight value to initialize memory with", "0.5"},
        {"max_outstanding_requests", "Maximum number of outstanding memory requests", "16"},
        {"max_cache_entries", "Maximum number of entries in the weight cache", "4096"},
        {"use_event_weight_fallback", "Use weight from spike event if memory fetch fails", "0"},
        {"merge_read_cacheline", "Merge memory reads to cache line size", "1"},
        {"merge_read_row", "Merge memory reads to a full row", "0"},
        {"line_size_bytes", "Cache line size in bytes", "64"},
        {"enable_detailed_map_log", "Enable detailed logging of neuron mapping", "0"},
        {"verify_weights", "Enable weight verification", "0"},
        {"weight_verify_samples", "Number of weight samples to verify", "16"},
        {"expected_weight_value", "Expected weight value for verification", "0.0"},
        {"verify_epsilon", "Epsilon for floating point comparison", "1e-4"},
        {"verify_log_each_sample", "Log each weight sample for verification", "0"}
    )

    SST_ELI_DOCUMENT_STATISTICS(
        {"spikes_received", "Number of spikes received by this core", "spikes", 1},
        {"spikes_generated", "Number of spikes generated by this core", "spikes", 1},
        {"neurons_fired", "Number of times neurons in this core fired", "events", 1},
        {"memory_requests", "Number of memory requests sent", "requests", 1},
        {"weight_cache_hits", "Number of weight cache hits", "hits", 1},
        {"weight_cache_misses", "Number of weight cache misses", "misses", 1},
        {"merged_reads_rows", "Number of memory reads merged to a full row", "requests", 1},
        {"merged_reads_cls", "Number of memory reads merged to a cache line", "requests", 1},
        {"weights_verify_count", "Number of weights verified", "count", 1},
        {"weights_mismatch_count", "Number of weights that failed verification", "count", 1},
        {"weights_verify_sum", "Sum of verified weights for averaging", "value", 1}
    )

    SnnPESubComponent(SST::ComponentId_t id, SST::Params& params);
    ~SnnPESubComponent();

    virtual void setParentInterface(SnnPEParentInterface* parent);
    virtual void init(unsigned int phase) override;
    virtual void setup() override;
    virtual void finish() override;

    virtual void deliverSpike(SpikeEvent* spike) override;
    virtual bool hasWork() const override;
    virtual double getUtilization() const override;
    virtual void getStatistics(std::map<std::string, uint64_t>& stats) const override;
    void setMemoryLink(SST::Link* link);

private:
    struct NeuronState {
        float v_mem;
        uint32_t refractory_timer;
        Cycle_t last_spike_time;
        NeuronState() : v_mem(0.0f), refractory_timer(0), last_spike_time(0) {}
        NeuronState(float v_r) : v_mem(v_r), refractory_timer(0), last_spike_time(0) {}
    };

    struct PendingMemoryRequest {
        SST::Interfaces::StandardMem::Request::id_t request_id;
        uint64_t address;
        size_t size;
        bool is_row;
        uint32_t pre;
        uint32_t post_start;
        uint32_t count_floats;
        bool has_single_cb;
        uint32_t cb_post;
        std::function<void(float)> single_cb;
    };

    bool clockTick(Cycle_t current_cycle);
    void handleMemoryResponse(SST::Interfaces::StandardMem::Request* req);
    void initializeStatistics();
    void updateNeuronStates();
    void applyLeak(uint32_t neuron_idx);
    void checkAndFireSpike(uint32_t neuron_idx);
    void processLocalSpike(SpikeEvent* spike_event);
    void requestWeight(uint32_t pre_neuron, uint32_t post_neuron, std::function<void(float)> callback);
    bool loadTextWeights(const std::string& weights_file_path);

    SnnPEParentInterface* parent_;
    Output* output_;
    SST::Interfaces::StandardMem* memory_;
    SST::Link* memory_link_;

    int core_id_;
    int total_cores_;
    uint64_t global_neuron_base_;
    uint32_t num_neurons_;
    float v_thresh_;
    float v_reset_;
    float v_rest_;
    float tau_mem_;
    uint32_t t_ref_;
    uint64_t base_addr_;
    uint32_t node_id_;
    int verbose_;
    bool enable_weight_fetch_;
    bool write_weights_on_init_;
    uint64_t memory_warmup_cycles_;
    float init_default_weight_;
    uint32_t max_outstanding_requests_;
    uint32_t max_cache_entries_;
    bool use_event_weight_fallback_;
    bool event_weight_fallback_warned_;
    bool merge_read_cacheline_;
    bool merge_read_row_;
    uint32_t line_size_bytes_;
    bool enable_detailed_map_log_;
    bool detailed_log_emitted_ = false;

    bool verify_weights_;
    uint32_t weight_verify_samples_;
    float expected_weight_value_;
    float verify_epsilon_;
    bool verify_log_each_sample_;
    bool verify_started_ = false;
    uint32_t verify_requested_ = 0;
    uint32_t verify_completed_ = 0;
    double verify_sum_ = 0.0;
    uint64_t verify_mismatch_count_ = 0;
    
    // 权重文件路径
    std::string weights_file_path_;

    std::vector<NeuronState> neuron_states_;
    std::queue<SpikeEvent*> incoming_spikes_;
    std::map<uint64_t, float> weight_cache_;
    std::map<SST::Interfaces::StandardMem::Request::id_t, PendingMemoryRequest> pending_memory_requests_;
    SST::Interfaces::StandardMem::Request::id_t next_request_id_;
    uint32_t outstanding_requests_ = 0;
    uint32_t pending_reqs_peak_ = 0;

    Cycle_t total_cycles_;
    Cycle_t active_cycles_;
    bool boot_read_sent_;
    bool boot_write_sent_;
    uint32_t delayed_read_counter_;
    bool delayed_read_triggered_ = false;
    bool weights_initialized_;
    bool memory_ready_;
    bool first_cache_hit_logged_ = false;
    bool first_cache_miss_logged_ = false;

    Statistic<uint64_t>* stat_spikes_received_;
    Statistic<uint64_t>* stat_spikes_generated_;
    Statistic<uint64_t>* stat_neurons_fired_;
    Statistic<uint64_t>* stat_memory_requests_;
    Statistic<uint64_t>* stat_weight_cache_hits_;
    Statistic<uint64_t>* stat_weight_cache_misses_;
    Statistic<uint64_t>* stat_merged_reads_rows_;
    Statistic<uint64_t>* stat_merged_reads_cls_;
    Statistic<uint64_t>* stat_weights_verify_count_;
    Statistic<uint64_t>* stat_weights_mismatch_count_;
    Statistic<double>* stat_weights_verify_sum_;
    
    // 内部计数器用于getStatistics()方法
    uint64_t count_spikes_received_;
    uint64_t count_spikes_generated_;
    uint64_t count_neurons_fired_;
    uint64_t count_memory_requests_;
};

} // namespace SnnDL
} // namespace SST

#endif // _H_SST_SNN_PE_SUBCOMPONENT
